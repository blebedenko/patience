atomicSim <- function(n,
lambda_0,
gamma,
theta,
eta = 1,
mu = 1,
s) {
# temporary: use true parameters as starting values
PARAMS <- c(gamma = gamma,
lambda_0 = lambda_0,
theta = theta)
# generate the sample
RES <-
resSimCosine(
n = n,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta,
s = s,
eta = eta,
mu = mu
)
boris <- mleBoris(RES, PARAMS)
liron <- mleLironThetaLambda(RES)
ans <- as.numeric(c(boris, liron))
names(ans) <-
c("B_gamma", "B_lambda", "B_theta", "L_theta", "L_lambda")
return(ans)
}
# Average likelihood ------------------------------------------------------
#' Compute log-likelihood from a dataset A,W,X
#'
#'
#' @param AWX dataframe with columns A,W,X
#' @param gamma
#' @param lambda_0
#' @param theta
#' @details this auxiliary function is used within `meanLogLikelihoodFromList`.
#' @return
#' @export
#'
#' @examples
ithLL <- function(AWX, gamma, lambda_0, theta) {
params <- c(gamma, lambda_0, theta)
negMean <- negLogLikelihoodMean(params = params, AWX = AWX)
return(negMean)
}
#' Average log likelihood from many files
#'
#' @param gamma
#' @param lambda_0
#' @param theta
#' @param res_list a list where each element is a dataframe with columns A,W,X
#'
#' @return the average likelihood for the parameter values provided
#' @export
#'
#' @examples
#' # use with vectorize:
#' VmLLVec <- Vectorize(meanLogLikelihoodFromList,vectorize.args = c("gamma","lambda_0","theta"))
#'
meanLogLikelihoodFromList <-
function(gamma, lambda_0, theta, res_list) {
mean(mapply(
ithLL,
res_list,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta
))
}
#' Make parameter grid for the average likelihood computation
#'
#' @param params named list of the parameters (gamma,lambda_0,theta)
#' @param spans vector of length 3 which determines the span of each axis in the
#' grid. Values must be in the interval [0,1). See details.
#' @param grid.sizes an integer vector of length 1 or 3. In the former case, all
#' axes have the same number of points, and in the latter each parameter is
#' matched to the corresponding element of `grid.sizes`.
#'
#' @return
#' @export
#'
#' @examples
makeParGrid <- function(params, spans, grid.sizes) {
if (!(length(spans) %in% c(1, 3)) ||
!(length(grid.sizes %in% c(1, 3))))
stop("Wrong length of spans/grid.sizes. Must be of lengths either 1 or 3.")
if (any(spans >= 1 | spans <= 0))
stop("All parameters must be positive. Please correct the value of spans.")
if (length(params) != 3)
stop("Invalid number of parameters, must be three - gamma, lambda_0, theta.")
# the central parameter values
names(params) <- c("gamma", "lambda_0", "theta")
gamma.seq <- seq(
from = params["gamma"] * (1 - spans[1]),
to = params["gamma"] * (1 + spans[1]),
length.out = grid.sizes[1]
)
lambda_0.seq <- seq(
from = params["lambda_0"] * (1 - spans[2]),
to = params["lambda_0"] * (1 + spans[2]),
length.out = grid.sizes[2]
)
theta.seq <- seq(
from = params["theta"] * (1 - spans[3]),
to = params["theta"] * (1 + spans[3]),
length.out = grid.sizes[3]
)
grid <- expand.grid(gamma.seq, lambda_0.seq, theta.seq)
names(grid) <- c("gamma", "lambda_0", "theta")
return(grid)
}
#' Title Read all simulation files in a folder
#'
#' @param path The folder path. Defaults to the current working directory.
#'
#' @return a list with elemets comprising the AWX tagbles.
#' @export
#'
#' @examples L <- readAWXFiles()
readAWXFiles <- function(path = getwd()) {
L <- pblapply(dir(path = path), read.csv)
return(L)
}
#' Evaluate the log likelihood function over a grid of parameter values
#'
#' @param AWX a dataset A,W,X
#' @param grid a grid of parameters
#'
#' @return
#' @export
#'
#' @examples
evaluateGridFromRealization <- function(AWX, grid) {
# prepare the data:
A <- AWX$A
W <- AWX$W
X <- AWX$X
A_i = A[-1]
A_tilde <- c(0, cumsum(A))
A_tilde <- A_tilde[-length(A_tilde)]
A_tilde_i = cumsum(A_i)
W_i = W[-1]
w_i = W[-length(W)]
x_i = X[-length(X)]
# the columns of this dataframe will contain the repeating values in the loglikelihood
tdf <- data.frame(A_i, A_tilde_i, W_i, w_i, x_i)
# columns that are independent of the parameters
tdf <- tdf %>%
mutate(
s3 = 2 * pi * (A_i + A_tilde_i),
s4 = cos(2 * pi * A_tilde_i),
s5 = sin(2 * pi * A_tilde_i)
)
# create a local function that computes the likelihood for one parameter value
getNegMeanLogLik <- function(gamma, lambda_0, theta) {
tdf %>%
# create the shortcut notation columns:
mutate(
s1 = exp(-theta * (w_i + x_i)),
s2 = exp(theta * A_i) - 1,
s3 = 2 * pi * (A_i + A_tilde_i),
s4 = cos(2 * pi * A_tilde_i),
s5 = sin(2 * pi * A_tilde_i),
s6 = s2 + 1
) %>%
# compute each row of the expression for l_i in the PDF
mutate(
row1 = log(gamma / 2 + lambda_0 + (gamma / 2) * s4),
row2 = W_i * theta,
row3 = gamma * s1 *
(2 * pi * s5 + theta * s4 - 2 * pi * sin(s3) * s6 - theta * s6 * cos(s3)) /
(2 * (theta ^ 2 + 4 * pi ^ 2)),
row4 = lambda_0 * s1 * s2 / theta,
row5 = gamma * s1 * s2 / (2 * theta)
) %>%
summarize(-mean(row1 - row2 + row3 - row4 - row5)) %>%
pull()
}
# apply the function to the parameter grid
ans <- mapply(
getNegMeanLogLik,
gamma = grid$gamma,
lambda_0 = grid$lambda_0,
theta = grid$theta
)
return(ans)
}
#' Evaluate a parameter grid's likelihood from AWX file
#'
#' @param path a AWX.csv file path
#' @param grid output of makeParGrid()
#' @param csv logical indicating whether to write a file
#'
#' @return
#' @export
#'
#' @examples
gridFromFilePath <- function(path, grid, csv = FALSE) {
AWX <- read.csv(path)
a <- Sys.time()
negLogLik <- evaluateGridFromRealization(AWX = AWX, grid = grid)
b <- Sys.time()
timediff <- as.numeric(b - a)
units <- attributes(b - a)$units
cat("Start @:", a, "Stop @:", b, "time diff. of", timediff, units, "\n")
res <- grid
res$negLogLik <- negLogLik
if (csv) {
timestamp <- substr(path, nchar(path) - 18, nchar(path) - 4)
filename <-
paste0("lik_grid_", timestamp, ".csv", collapse = "")
write.csv(res, filename)
} else
return(res)
}
#' Evaluate MLE's  from AWX data
#'
#' @param path a AWX.csv file path
#' @param grid output of makeParGrid()
#'
#' @return Length 5 vector - 3 Boris + 2 Liron
#' @export
#'
#' @examples
mleFromFilePath <- function(path) {
AWX <- read.csv(path)
boris <- mleBoris(AWX = AWX, PARAMS = PARAMS)
liron <- mleLironThetaLambda(AWX = AWX)
mles <- c(boris, liron)
mles
}
#' Create all estimate files in a folder
#'
#' @param grid parameter value grid (makeParGrid())
#' @param csv (Default = TRUE) should files of each grid be written?
#'
#' @return
#' @export
#'
#' @examples
estimateFolder <- function(grid, PARAMS, write_summary = TRUE) {
paths <- dir(full.names = TRUE)
MLE <- tibble()
LG <- list()
i <- 1
for (path in paths) {
cat(i, "\n")
# write the corresponding likelihood grid file:
# gridFromFilePath(path = path,
#                  grid = grid,
#                  csv = TRUE)
# save the MLE's
# experiment
LG[[i]] <-  gridFromFilePath(path = path,
grid = grid,
csv = FALSE)
# save the MLE's
MLE <- MLE %>% bind_rows(mleFromFilePath(path = path))
i <- i + 1
}
negLL <- list()
for (k in 1:length(LG)) {
negLL[[k]] <- LG[[k]] %>% pull(negLogLik)
}
aveNegLogLik <- rowMeans(Reduce(cbind, negLL))
ans <- grid %>%
bind_cols(aveNegLogLik)
if (write_summary) {
write.csv(x = ans,
file = "likelihood_grid.csv",
row.names = FALSE)
write.csv(x = MLES,
file = "MLE.csv",
row.names = FALSE)
}
return(list(MLE = MLE, likGrid = ans))
}
#' Estimate from all subfolders
#'
#' @param grid
#' @param PARAMS
#'
#' @return
#' @export
#'
#' @examples
estimateALL <- function(grid, PARAMS) {
folder_names <- dir() # folder names like 'realizations for n=3'
SS <- parse_number(folder_names)
for (w in 1:length(folder_names)) {
curr_folder <- folder_names[w]
setwd(curr_folder)
curr_s <- SS[w]
L <-
estimateFolder(grid = grid,
PARAMS = PARAMS,
write_summary = FALSE)
cat("done with", curr_folder, "\n")
cat("writing summaries in ", getwd())
write.csv(
x = L$likGrid,
file = paste0("likelihood_grid_s=", curr_s, ".csv")
,
row.names = FALSE
)
write.csv(
x = L$MLE,
file = paste0("MLE_s=", curr_s, ".csv")
,
row.names = FALSE
)
setwd("..")
}
}
# Utilities ---------------------------------------------------------------
#' Utility: turn RES to AWX
#'
#' @param RES
#'
#' @return
#' @export
#'
#' @examples
RES2AWX <-
function(RES) {
return(data.frame(
A = RES$Aj,
W = RES$Wj,
X = RES$Xj
))
}
#' Utility: name the individual simulation results
#'
#' @param n_obs
#' @param gamma
#' @param lambda_0
#' @param theta
#' @param s
#' @param eta
#' @param mu
#'
#' @return
#' @export
#'
#' @examples
filenamer <- function(n_obs, gamma, lambda_0, theta, s, eta, mu) {
name <- (
paste0(
"AWX_",
"s=",
s,
"n=",
n_obs,
"gamma=",
gamma,
"lambda_0=",
lambda_0,
"theta=",
theta,
"eta=",
eta,
"mu=",
mu
)
)
name <- paste0(name,
as.numeric(Sys.time()),
".csv") # name with timestamp and extension
return(name)
}
#' Time expression runtime and return value
#'
#' @param expr any R expression
#'
#' @return
#' @export
#'
#' @examples
tik <- function(expr) {
a <- lubridate::now()
print(a)
whatever <- {
expr
}
b <- lubridate::now()
print(b - a)
return(whatever)
}
#' Check Little's law on simulation results
#'
#' @param RES
#'
#' @return
#' @export
#'
#' @examples
littleLaw <- function(RES) {
average_arrival_rate <- length(RES$Aj) / RES$klok[length(RES$klok)]
wait_x_arrival <-  mean(W + eta / mu) * average_arrival_rate
wait_x_arrival <- round(wait_x_arrival, 3)
queue_length <-
sum(Q.trans[1:nt] * IT.times[1:nt]) / sum(IT.times[1:nt]) %>% round(3)
queue_length <- round(queue_length, 3)
msg <-
paste("Waiting time * Average rate = ",
wait_x_arrival,
"\nQueue length = ",
queue_length)
message(msg)
}
# testing file
library(tictoc)
library(tidyverse)
library(simsalapar)
library(parallel)
library(patience)
library(pbapply)
library(doParallel)
eta <- 1
mu <- 1
s <- 1
# EB (Job size epxectation)eta/mu
n <- 5e4
gamma <- 4
lambda_0 <- 10
theta <- 2.5
(rho <- (gamma + lambda_0 / 2) * eta / (s * mu))
PARAMS <- c(gamma,lambda_0,theta)
R <- resSimCosine(n = 5,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta,
s = s,
eta = eta,
mu = mu
)
(A <- R$Aj)
(A_tilde <- cumsum(R$Aj))
(IT <- R$IT.times)
(Qt <- R$Q.trans)
cumsum(A)
cumsum(IT)
Qt
pltQueueAtArrivals(A,Qt,IT)
pltOneCycle(RES = R,start_time = 1)
#' Plot statistics for one arrival cycle
#'
#' @param RES
#' @param start_time The number of the cycle (1, 2, etc.)
#'
#' @return
#' @export
#'
#' @examples
pltOneCycle <- function(RES, start_time){
A <- RES$Aj # start from 0
A_tilde <-cumsum(A)
Q.trans <- RES$Q.trans[-length(RES$Q.trans)]
IT.times <- RES$IT.times
A_cycle <- A[A_tilde >= start_time & A_tilde <= (start_time + 1)]
transitions <- cumsum(IT.times)
Q_cycle <- Q.trans[transitions >= start_time & transitions <= (start_time + 1)]
IT_cycle <- IT.times[transitions >= start_time & transitions <= (start_time + 1)]
pltQueueAtArrivals(A = A_cycle,Q.trans = Q_cycle,IT.times = IT_cycle)
}
pltOneCycle(RES = R,start_time = 1)
transitions <- cumsum(IT.times)
A_tilde <- cumsum(A)
Q.trans <- Q.trans[-length(Q.trans)] # the last element is removed
attach(R)
transitions <- cumsum(IT.times)
A_tilde <- cumsum(A)
Q.trans <- Q.trans[-length(Q.trans)] # the last element is removed
Q.trans
transitions
transitions[1]
A[1]
transitions <- cumsum(IT.times)
A_tilde <- cumsum(A)
Q.trans <- Q.trans[-1] # the last element is removed
transitions[1]
A[1]
plot(
transitions,
Q.trans,
type = 's',
lwd = 0.5,
ylim = range(pretty(c(0,max(Q.trans)))),
xlab = "time",
ylab = "No. customers",
col = "darkgreen",
main = "Queue length @ effective arrivals"
)
R
attach(R)
transitions <- cumsum(IT.times)
A_tilde <- cumsum(A)
Q.trans <- Q.trans[-1] # the last element is removed
plot(
transitions,
Q.trans,
type = 's',
lwd = 0.5,
ylim = range(pretty(c(0,max(Q.trans)))),
xlab = "time",
ylab = "No. customers",
col = "darkgreen",
main = "Queue length @ effective arrivals"
)
reticulate::repl_python()
