),
tableOutput("tab1"),
plotlyOutput("likelihood_average_plot")
)
,
## Performance panel ----
tabPanel("Estimator performance",
tableOutput("performance_summary")
)
)
# Server ------------------------------------------------------------------
server <- function(input, output, session) {
## Simulation ----
RES <- eventReactive(input$simulation_go, {
eta <- input$eta %>% as.integer()
mu <- input$mu %>% as.integer()
nservers <- input$s %>% as.integer()
n_obs <- input$n_obs %>% as.integer()
gamma <- input$gamma %>% as.integer()
lambda_0 <- input$lambda_0 %>% as.integer()
theta <- input$theta %>% as.integer()
PARAMS <- c(gamma, lambda_0, theta)
# eta <- 1 %>% as.numeric()
# mu <- 1 %>% as.numeric()
# nservers <- 5 %>% as.numeric()
# n.obs <- 1000 %>% as.numeric()
# gamma <- 10 %>% as.numeric()
# lambda_0 <- 10 %>% as.numeric()
# theta <- 1 %>% as.numeric()
RES <- resSimCosine(
n = n_obs,
gamma = input$gamma,
lambda_0 = input$lambda_0,
theta = input$theta,
s = input$s,
eta = input$eta,
mu = input$mu
)
RES
})
AWX <- reactive({
data.frame(A = RES()$Aj,
W = RES()$Wj,
X = RES()$Xj)
})
PARAMS <- reactive({
gamma <- input$gamma %>% as.numeric()
lambda_0 <- input$lambda_0 %>% as.numeric()
theta <- input$theta %>% as.numeric()
PARAMS <- c("gamma" = gamma,
"lambda_0" = lambda_0,
"theta" = theta)
PARAMS
})
output$PARAMS <- renderTable({
#data.frame(gamma = input$gamma, lambda_0 = input$lambda_0, theta = input$theta)
as.data.frame(PARAMS(), row.names = names(PARAMS()))
})
### Plots ----
output$simulation_plot_queue <- renderPlot({
pltQueueLengthArrivals(RES(), n_customers = 100)
})
output$simulation_plot_customers_patience <- renderPlot({
pltQueueByHour(RES())
})
output$simulation_plot_hourly_queue <- renderPlot({
pltQueueByHourPerc(RES())
})
### Point Estimation ----
output$simulation_estimates <- renderTable({
AWX <-  AWX()
boris <-
mleBoris(AWX = AWX(), PARAMS = PARAMS()) # gamma, lambda_0, theta
liron <-
mleLironThetaLambda(AWX = AWX()) # theta.hat, "lambda".hat
params <- PARAMS()
params <- params[-3]
arrival_known  <-  mleKnownArrival(AWX, params = params)
true_params <- PARAMS() # true values of gamma, lambda_0, theta
liron_tab <- c(NA, liron[2], liron[1])
estimates <-
data.frame(
true = true_params,
boris = boris,
liron = liron_tab,
known_arrival = c(NA, NA, arrival_known)
)
estimates
},
width = "100%",spacing = "l")
## Likelihood ----
observeEvent(input$likelihood_scenario, {
updateRadioButtons(inputId = "likelihood_s",
choices = serversScenario(input$likelihood_scenario))
})
output$tab1 <- renderTable(
head(dat)
)
output$likelihood_average_plot <- renderPlotly({
dat <- dat_lik
p1 <- plot_ly(x=~gamma,y=~lambda_0,z=~negLogLik,type="mesh3d",data =dat,split = factor(dat$theta ),
contour = list(show = TRUE,color = "#001",width = 5), opacity = 0.5)
p1
})
## Performance ----
output$performance_summary <- renderTable({
# dat_mle$gamma[dat_mle$gamma == trunc(dat_mle$gamma)]
})
}
shinyApp(ui = ui, server = server)
#### App for everything
library(shiny)
library(plotly)
library(tidyverse)
library(patience)
# Data --------------------------------------------------------------------
dat_lik <- read.csv('C2_big.csv')
dat_mle <- read.csv('C2_big_mle.csv')
# Functions ---------------------------------------------------------------
# no. of servers from scenario
serversScenario <- function(scenario) {
SS <- switch(scenario,
"C1" = 1:4 * 10,
"C2" = 1:4 * 10,
"C3" = 1:5
)
return(SS)
}
# UI ----------------------------------------------------------------------
ui <- navbarPage(windowTitle = "Periodical Arrivals and Impatient Customers",
title = "Periodical Arrivals and Impatient Customers",
## Simulations ----
tabPanel(
title = "Simulate",
h4("Choose parameters, then press the button to generate a realization"),
### inputs for simulation ----
inputPanel(
numericInput(
inputId = "n_obs",
label = "n",
value = 1000,
min = 100,
max = 100000,
step = 100
),
numericInput(
inputId = "mu",
label = "mu",
value = 1,
min = 0.1,
max = 10,
step = 0.1
),
numericInput(
inputId = "eta",
label = "eta",
value = 1,
min = 0.1,
max = 10,
step = 0.1
),
numericInput(
inputId = "s",
label = "s",
value = 5,
min = 1,
max = 100,
step = 1L
),
numericInput(
inputId = "gamma",
label = "gamma",
value = 10,
min = 0.1,
max = 100,
step = 0.1
),
numericInput(
inputId = "lambda_0",
label = "lambda_0",
value = 10,
min = 0.1,
max = 100,
step = 0.1
),
numericInput(
inputId = "theta",
label = "theta",
value = 1,
min = 0.1,
max = 10,
step = 0.1
)
),
actionButton("simulation_go", "Simulate", icon = icon('play')),
### plots for the simulation -----
fluidRow(
column(
width = 6,
plotOutput("simulation_plot_queue"),
plotOutput("simulation_plot_customers_patience")
),
column(
width = 6,
plotOutput("simulation_plot_hourly_queue"),
tableOutput("simulation_estimates")
)
)
),
## Likelihood panel ----
tabPanel(title = "Likelihood",
h4("Choose a scenario to plot the average likelihood function"),
h5("For each scenario, select number of servers"),
### inputs for likelihood ----
inputPanel(
### scenario:
radioButtons("likelihood_scenario",
label = "select scenario:",
choices = paste0("C", 1:3)),
### sample size per iteration:
radioButtons(inputId = "likelihood_sample_size",
label = "sample size (thousands)",
choices = c(10,100)),
### no. of servers
radioButtons(inputId = "likelihood_s", label = "no. servers",choices = 1:3)
),
tableOutput("tab1"),
plotlyOutput("likelihood_average_plot")
)
,
## Performance panel ----
tabPanel("Estimator performance",
tableOutput("performance_summary")
)
)
# Server ------------------------------------------------------------------
server <- function(input, output, session) {
## Simulation ----
RES <- eventReactive(input$simulation_go, {
eta <- input$eta %>% as.integer()
mu <- input$mu %>% as.integer()
nservers <- input$s %>% as.integer()
n_obs <- input$n_obs %>% as.integer()
gamma <- input$gamma %>% as.integer()
lambda_0 <- input$lambda_0 %>% as.integer()
theta <- input$theta %>% as.integer()
PARAMS <- c(gamma, lambda_0, theta)
# eta <- 1 %>% as.numeric()
# mu <- 1 %>% as.numeric()
# nservers <- 5 %>% as.numeric()
# n.obs <- 1000 %>% as.numeric()
# gamma <- 10 %>% as.numeric()
# lambda_0 <- 10 %>% as.numeric()
# theta <- 1 %>% as.numeric()
RES <- resSimCosine(
n = n_obs,
gamma = input$gamma,
lambda_0 = input$lambda_0,
theta = input$theta,
s = input$s,
eta = input$eta,
mu = input$mu
)
RES
})
AWX <- reactive({
data.frame(A = RES()$Aj,
W = RES()$Wj,
X = RES()$Xj)
})
PARAMS <- reactive({
gamma <- input$gamma %>% as.numeric()
lambda_0 <- input$lambda_0 %>% as.numeric()
theta <- input$theta %>% as.numeric()
PARAMS <- c("gamma" = gamma,
"lambda_0" = lambda_0,
"theta" = theta)
PARAMS
})
output$PARAMS <- renderTable({
#data.frame(gamma = input$gamma, lambda_0 = input$lambda_0, theta = input$theta)
as.data.frame(PARAMS(), row.names = names(PARAMS()))
})
### Plots ----
output$simulation_plot_queue <- renderPlot({
pltQueueLengthArrivals(RES(), n_customers = 100)
})
output$simulation_plot_customers_patience <- renderPlot({
pltQueueByHour(RES())
})
output$simulation_plot_hourly_queue <- renderPlot({
pltQueueByHourPerc(RES())
})
### Point Estimation ----
output$simulation_estimates <- renderTable({
AWX <-  AWX()
boris <-
mleBoris(AWX = AWX(), PARAMS = PARAMS()) # gamma, lambda_0, theta
liron <-
mleLironThetaLambda(AWX = AWX()) # theta.hat, "lambda".hat
params <- PARAMS()
params <- params[-3]
arrival_known  <-  mleKnownArrival(AWX, params = params)
true_params <- PARAMS() # true values of gamma, lambda_0, theta
liron_tab <- c(NA, liron[2], liron[1])
estimates <-
data.frame(
true = true_params,
boris = boris,
liron = liron_tab,
known_arrival = c(NA, NA, arrival_known)
)
estimates
},
width = "100%",spacing = "l")
## Likelihood ----
observeEvent(input$likelihood_scenario, {
updateRadioButtons(inputId = "likelihood_s",
choices = serversScenario(input$likelihood_scenario))
})
output$tab1 <- renderTable(
head(dat)
)
output$likelihood_average_plot <- renderPlotly({
dat <- dat_lik
p1 <- plot_ly(x=~gamma,y=~lambda_0,z=~negLogLik,type="mesh3d",data =dat,split = factor(dat$theta ),
contour = list(show = TRUE,color = "#001",width = 5), opacity = 0.5)
p1
})
## Performance ----
output$performance_summary <- renderTable({
# dat_mle$gamma[dat_mle$gamma == trunc(dat_mle$gamma)]
})
}
shinyApp(ui = ui, server = server)
p1 <- plot_ly(x=~gamma,y=~lambda_0,z=~ave_neg_lik,type="mesh3d",data =dat,split = factor(dat$theta ),
contour = list(show = TRUE,color = "#001",width = 5), opacity = 0.5)
p1
dat <- dat_lik
p1 <- plot_ly(x=~gamma,y=~lambda_0,z=~ave_neg_lik,type="mesh3d",data =dat,split = factor(dat$theta ),
contour = list(show = TRUE,color = "#001",width = 5), opacity = 0.5)
p1 <- plot_ly(x=~gamma,y=~lambda_0,z=~ave_neg_lik,type="mesh3d",data =dat,split = factor(dat$theta ),
contour = list(show = TRUE,color = "#001",width = 5), opacity = 0.5)
dat$ave_neg_lik1
dat$ave_neg_lik
dat_lik
dat_lik
plot_ly()
plot_ly() %>%
add_trace(x = "gamma", y = "lambda_0")
curr_dat_lik <- dat_lik %>% filter(s == 10)
curr_dat_lik <- dat_lik %>% filter(s == 10)
plot_ly() %>%
add_trace(x = "gamma", y = "lambda_0", split = factor(theta),data = curr_dat_lik)
plot_ly() %>%
add_trace(x = "gamma", y = "lambda_0", split = factor("theta"),data = curr_dat_lik)
plot_ly() %>%
add_trace(x = "gamma", y = "lambda_0", split = factor("theta"), type = "mesh3d",data = curr_dat_lik)
plot_ly() %>%
add_trace(
x = "gamma",
y = "lambda_0",
split = factor("theta"),
type = "mesh3d",
contour = list(show = TRUE),
data = curr_dat_lik
)
plot_ly(
x = "gamma",
y = "lambda_0",
split = factor("theta"),
type = "mesh3d",
contour = list(show = TRUE),
data = curr_dat_lik
)
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
library(plotly)
curr_dat_lik <- dat_lik %>% filter(s == 10)
plot_ly(
x = "gamma",
y = "lambda_0",
split = factor("theta"),
type = "mesh3d",
contour = list(show = TRUE),
data = curr_dat_lik
)
plot_ly(
x = "gamma",
y = "lambda_0",
split = factor("theta"),
type = "mesh3d",
contour = list(show = TRUE,color="blue"),
data = curr_dat_lik
)
plot_ly() %>%
add_trace(
x = "gamma",
y = "lambda_0",
split = factor("theta"),
type = "mesh3d",
contour = list(show = TRUE,color="blue"),
data = curr_dat_lik
)
library("plot3D")
dat <- dat_lik
scatter3D(x = dat$gamma, y = dat$lambda_0)
scatter3D(x = dat$gamma, y = dat$lambda_0, z = dat$theta)
scatter3D(x = dat$gamma, y = dat$lambda_0, z = dat$ave_neg_lik)
scatter3D(x = dat$gamma,
y = dat$lambda_0,
z = dat$ave_neg_lik,colvar = factor(dat$theta))
scatter3D(x = dat$gamma,
y = dat$lambda_0,
z = dat$ave_neg_lik,colvar =
(dat$theta))
scatter3D(x = dat$gamma,
y = dat$lambda_0,
z = dat$ave_neg_lik,
colvar = dat$s)
scatter3D(x = dat$gamma,
y = dat$lambda_0,
z = dat$ave_neg_lik,
colvar = dat$s,col = factor(dat$theta))
scatter3D(x = 0,
y = 0,
z = 0,
colvar = dat$s,
sf)
library("plot3D")
rnorm(30)
dat <- dat_lik
scatter3D(x = 0,
y = 0,
z = 0,
)
scatter3D(x = 0,
y = 0,
z = 0
)
surf3D(x = dat$gamma,
y = dat$lambda_0,
z = dat$ave_neg_lik)
surf3D(x = matrix(dat$gamma),
y = dat$lambda_0,
z = dat$ave_neg_lik)
surf3D(x = matrix(dat$gamma),
y = matrix(dat$lambda_0),
z = dat$ave_neg_lik)
matrix(dat$lambda_0)
surf3D(x = matrix(dat$gamma),
y = matrix(dat$lambda_0),
z = matrix(dat$ave_neg_lik))
d10 <- dat %>% filter(s == 10)
x <- unique(dat$gamma)
y <- unique(dat$lambda_0)
zGet <- function(g,l) d10 %>% filter(gamma == g, lambda_0 == l) %>% pull(ave_neg_lik)
d10$gamma
g <- 40
l <- 10
d10 %>% filter(gamma == g, lambda_0 == l) %>% pull(ave_neg_lik)
library(dplyr)
d10 %>% filter(gamma == g, lambda_0 == l) %>% pull(ave_neg_lik)
d10 %>% filter(gamma == g, lambda_0 == l)
d10 <- dat %>% filter(s == 10, theta == 2.5)
x <- unique(dat$gamma) %>% matrix()
y <- unique(dat$lambda_0) %>% matrix()
d10 %>% filter(gamma == g, lambda_0 == l) %>% pull(ave_neg_lik)
d10 %>% filter(gamma == g, lambda_0 == l) %>% pull(ave_neg_lik)
z <- outer(x,y,zGet)
x <- unique(dat$gamma) %>% matrix()
y <- unique(dat$lambda_0) %>% matrix()
zGet <- function(g,l) d10 %>% filter(gamma == g, lambda_0 == l) %>% pull(ave_neg_lik)
z <- outer(x,y,zGet)
x <- unique(dat$gamma)# %>% matrix()
y <- unique(dat$lambda_0) #%>% matrix()
zGet <- function(g,l) d10 %>% filter(gamma == g, lambda_0 == l) %>% pull(ave_neg_lik)
z <- outer(x,y,zGet)
d10 <- dat %>% filter(s == 10, theta == 2.5)
x <- unique(dat$gamma)# %>% matrix()
y <- unique(dat$lambda_0) #%>% matrix()
zGet <- function(g,l) d10 %>% filter(gamma == g, lambda_0 == l) %>% pull(ave_neg_lik)
z <- outer(x,y,zGet)
x
y
zGet <- function(G,L){
ans <- matrix(NA, nrow = length(G),ncol = length(M))
for (i in 1:length(G)){
for (j in 1:length(L)){
ans[i,j] <- d10 %>% filter(gamma == g, lambda_0 == l) %>% pull(ave_neg_lik)
}
}
return(ans)
}
z <- outer(x,y,zGet)
x
y
d10 <- dat %>% filter(s == 10, theta == 2.5)
x <- unique(dat$gamma)# %>% matrix()
y <- unique(dat$lambda_0) #%>% matrix()
zGet <- function(G,L){
ans <- matrix(NA, nrow = length(G),ncol = length(M))
for (i in 1:length(G)){
for (j in 1:length(L)){
ans[i,j] <- d10 %>% filter(gamma == g, lambda_0 == l) %>% pull(ave_neg_lik)
}
}
return(ans)
}
z <- outer(x,y,zGet)
