function(gamma, lambda_0, theta, res_list) {
mean(mapply(
ithLL,
res_list,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta
))
}
#' Make parameter grid for the average likelihood computation
#'
#' @param params named list of the parameters (gamma,lambda_0,theta)
#' @param spans vector of length 3 which determines the span of each axis in the
#' grid. Values must be in the interval [0,1). See details.
#' @param grid.sizes an integer vector of length 1 or 3. In the former case, all
#' axes have the same number of points, and in the latter each parameter is
#' matched to the corresponding element of `grid.sizes`.
#'
#' @return
#' @export
#'
#' @examples
makeParGrid <- function(params, spans, grid.sizes) {
if (!(length(spans) %in% c(1, 3)) ||
!(length(grid.sizes %in% c(1, 3))))
stop("Wrong length of spans/grid.sizes. Must be of lengths either 1 or 3.")
if (any(spans >= 1 | spans <= 0))
stop("All parameters must be positive. Please correct the value of spans.")
if (length(params) != 3)
stop("Invalid number of parameters, must be three - gamma, lambda_0, theta.")
# the central parameter values
names(params) <- c("gamma", "lambda_0", "theta")
gamma.seq <- seq(
from = params["gamma"] * (1 - spans[1]),
to = params["gamma"] * (1 + spans[1]),
length.out = grid.sizes[1]
)
lambda_0.seq <- seq(
from = params["lambda_0"] * (1 - spans[2]),
to = params["lambda_0"] * (1 + spans[2]),
length.out = grid.sizes[2]
)
theta.seq <- seq(
from = params["theta"] * (1 - spans[3]),
to = params["theta"] * (1 + spans[3]),
length.out = grid.sizes[3]
)
grid <- expand.grid(gamma.seq, lambda_0.seq, theta.seq)
names(grid) <- c("gamma", "lambda_0", "theta")
return(grid)
}
#' Title Read all simulation files in a folder
#'
#' @param path The folder path. Defaults to the current working directory.
#'
#' @return a list with elemets comprising the AWX tagbles.
#' @export
#'
#' @examples L <- readAWXFiles()
readAWXFiles <- function(path = getwd()) {
L <- pblapply(dir(path = path), read.csv)
return(L)
}
#' Evaluate the log likelihood function over a grid of parameter values
#'
#' @param AWX a dataset A,W,X
#' @param grid a grid of parameters
#'
#' @return
#' @export
#'
#' @examples
evaluateGridFromRealization <- function(AWX, grid) {
# prepare the data:
A <- AWX$A
W <- AWX$W
X <- AWX$X
A_i = A[-1]
A_tilde <- c(0, cumsum(A))
A_tilde <- A_tilde[-length(A_tilde)]
A_tilde_i = cumsum(A_i)
W_i = W[-1]
w_i = W[-length(W)]
x_i = X[-length(X)]
# the columns of this dataframe will contain the repeating values in the loglikelihood
tdf <- data.frame(A_i, A_tilde_i, W_i, w_i, x_i)
# columns that are independent of the parameters
tdf <- tdf %>%
mutate(
s3 = 2 * pi * (A_i + A_tilde_i),
s4 = cos(2 * pi * A_tilde_i),
s5 = sin(2 * pi * A_tilde_i)
)
# create a local function that computes the likelihood for one parameter value
getNegMeanLogLik <- function(gamma, lambda_0, theta) {
tdf %>%
# create the shortcut notation columns:
mutate(
s1 = exp(-theta * (w_i + x_i)),
s2 = exp(theta * A_i) - 1,
s3 = 2 * pi * (A_i + A_tilde_i),
s4 = cos(2 * pi * A_tilde_i),
s5 = sin(2 * pi * A_tilde_i),
s6 = s2 + 1
) %>%
# compute each row of the expression for l_i in the PDF
mutate(
row1 = log(gamma / 2 + lambda_0 + (gamma / 2) * s4),
row2 = W_i * theta,
row3 = gamma * s1 *
(2 * pi * s5 + theta * s4 - 2 * pi * sin(s3) * s6 - theta * s6 * cos(s3)) /
(2 * (theta ^ 2 + 4 * pi ^ 2)),
row4 = lambda_0 * s1 * s2 / theta,
row5 = gamma * s1 * s2 / (2 * theta)
) %>%
summarize(-mean(row1 - row2 + row3 - row4 - row5)) %>%
pull()
}
# apply the function to the parameter grid
ans <- mapply(
getNegMeanLogLik,
gamma = grid$gamma,
lambda_0 = grid$lambda_0,
theta = grid$theta
)
return(ans)
}
#' Evaluate a parameter grid's likelihood from AWX file
#'
#' @param path a AWX.csv file path
#' @param grid output of makeParGrid()
#' @param csv logical indicating whether to write a file
#'
#' @return
#' @export
#'
#' @examples
gridFromFilePath <- function(path, grid, csv = FALSE) {
AWX <- read.csv(path)
a <- Sys.time()
negLogLik <- evaluateGridFromRealization(AWX = AWX, grid = grid)
b <- Sys.time()
timediff <- as.numeric(b - a)
units <- attributes(b - a)$units
cat("Start @:", a, "Stop @:", b, "time diff. of", timediff, units, "\n")
res <- grid
res$negLogLik <- negLogLik
if (csv) {
timestamp <- substr(path, nchar(path) - 18, nchar(path) - 4)
filename <- paste0("lik_grid_", timestamp, ".csv", collapse = "")
write.csv(res, filename)
} else
return(res)
}
#' Evaluate MLE's  from AWX data
#'
#' @param path a AWX.csv file path
#' @param grid output of makeParGrid()
#'
#' @return Length 5 vector - 3 Boris + 2 Liron
#' @export
#'
#' @examples
mleFromFilePath <- function(path) {
AWX <- read.csv(path)
boris <- mleBoris(AWX = AWX, PARAMS = PARAMS)
liron <- mleLironThetaLambda(AWX = AWX)
mles <- c(boris, liron)
mles
}
#' Create all estimate files in a folder
#'
#' @param grid
#'
#' @return
#' @export
#'
#' @examples
estimateFolder <- function(params) {
PARAMS <- params
pars <- paste0("The parameters are: ",
paste0(
c("gamma = ", gamma, "lambda_0 = ", lambda_0, "theta = ", theta),
collapse = " "
),
collapse = " ")
grid <- makeParGrid(params = PARAMS,spans = c(0.5,0.5,0.5),grid.sizes = c(20,20,5))
paths <- dir(full.names = TRUE)
for (path in paths) {
gridFromFilePath(path = path,
grid = grid,
csv = TRUE)
}
}
# Utilities ---------------------------------------------------------------
#' Utility: turn RES to AWX
#'
#' @param RES
#'
#' @return
#' @export
#'
#' @examples
RES2AWX <-
function(RES) {
return(data.frame(
A = RES$Aj,
W = RES$Wj,
X = RES$Xj
))
}
#' Utility: name the individual simulation results
#'
#' @param n_obs
#' @param gamma
#' @param lambda_0
#' @param theta
#' @param s
#' @param eta
#' @param mu
#'
#' @return
#' @export
#'
#' @examples
filenamer <- function(n_obs, gamma, lambda_0, theta, s, eta, mu) {
name <- (
paste0(
"AWX_",
"s=",
s,
"n=",
n_obs,
"gamma=",
gamma,
"lambda_0=",
lambda_0,
"theta=",
theta,
"eta=",
eta,
"mu=",
mu
)
)
name <- paste0(name,
as.numeric(Sys.time()),
".csv") # name with timestamp and extension
return(name)
}
#' Time expression runtime and return value
#'
#' @param expr any R expression
#'
#' @return
#' @export
#'
#' @examples
tik <- function(expr) {
a <- lubridate::now()
print(a)
whatever <- {
expr
}
b <- lubridate::now()
print(b - a)
return(whatever)
}
#' Check Little's law on simulation results
#'
#' @param RES
#'
#' @return
#' @export
#'
#' @examples
littleLaw <- function(RES) {
average_arrival_rate <- length(RES$Aj) / RES$klok[length(RES$klok)]
wait_x_arrival <-  mean(W + eta / mu) * average_arrival_rate
wait_x_arrival <- round(wait_x_arrival, 3)
queue_length <-
sum(Q.trans[1:nt] * IT.times[1:nt]) / sum(IT.times[1:nt]) %>% round(3)
queue_length <- round(queue_length, 3)
msg <-
paste("Waiting time * Average rate = ",
wait_x_arrival,
"\nQueue length = ",
queue_length)
message(msg)
}
#' Create all estimate files in a folder
#'
#' @param grid
#'
#' @return
#' @export
#'
#' @examples
estimateFolder <- function(params) {
PARAMS <- params
pars <- paste0("The parameters are: ",
paste0(
c("gamma = ", gamma, "lambda_0 = ", lambda_0, "theta = ", theta),
collapse = " "
),
collapse = " ")
grid <- makeParGrid(params = PARAMS,spans = c(0.5,0.5,0.5),grid.sizes = c(20,20,5))
paths <- dir(full.names = TRUE)
for (path in paths) {
gridFromFilePath(path = getwd(),
grid = grid,
csv = TRUE)
}
}
dir(".")
#' Create all estimate files in a folder
#'
#' @param grid
#'
#' @return
#' @export
#'
#' @examples
estimateFolder <- function(params) {
PARAMS <- params
pars <- paste0("The parameters are: ",
paste0(
c("gamma = ", gamma, "lambda_0 = ", lambda_0, "theta = ", theta),
collapse = " "
),
collapse = " ")
grid <- makeParGrid(params = PARAMS,spans = c(0.5,0.5,0.5),grid.sizes = c(20,20,5))
paths <- dir(full.names = TRUE)
for (path in paths) {
gridFromFilePath(path = ".",
grid = grid,
csv = TRUE)
}
}
setwd("~/patience/results/C3/n=50K/realizations for s=3")
estimateFolder
estimateFolder(params = PARAMS)
gridFromFilePath
#' Create all estimate files in a folder
#'
#' @param grid
#'
#' @return
#' @export
#'
#' @examples
estimateFolder <- function(params) {
PARAMS <- params
pars <- paste0("The parameters are: ",
paste0(
c("gamma = ", gamma, "lambda_0 = ", lambda_0, "theta = ", theta),
collapse = " "
),
collapse = " ")
grid <- makeParGrid(params = PARAMS,spans = c(0.5,0.5,0.5),grid.sizes = c(20,20,5))
paths <- dir(full.names = TRUE)
for (path in paths) {
gridFromFilePath(path= path,
grid = grid,
csv = TRUE)
}
}
setwd("~/patience/results/C3/n=50K/realizations for s=3")
estimateFolder(params = PARAMS)
setwd("~/patience/results/C3/n=50K/realizations for s=5")
estimateFolder(params = PARAMS)
setwd("~/patience/results/C3/n=100K/realizations for s=5")
estimateFolder(params = PARAMS)
dir()
folder <- getwd()
all_paths <- dir(folder)
all_paths[grepl("lik_grid")]
all_paths[grepl("lik_grid",all_paths)]
L <- sapply(lik_grids, read.csv)
lik_grids <- all_paths[grepl("lik_grid",all_paths)]
L <- sapply(lik_grids, read.csv)
L
L[[1]]
L[[1]]
L
L <- lapply(lik_grids, read.csv)
L
L[[1]]
str(L)
nrow(L[[1]])
L
L[[ยง]]
L[[1]]
L[[ยง]] %>% str
L[[1]] %>% str
L[[1]]["negLogLik"]
L[[i]] %>% pull(negLogLik)
L[[1]] %>% pull(negLogLik)
L[[1]]
L[[1]] %>% select(gamma,lambda_0,theta)
L[[1]] %>% select(gamma,lambda_0,theta)
grid <- L[[1]] %>% select(gamma,lambda_0,theta)
all_paths <- dir(folder)
lik_grids <- all_paths[grepl("lik_grid",all_paths)]
L <- lapply(lik_grids, read.csv)
liks <- matrix(NA, nrow = nrow(L[[1]]), ncol = length(L))
for (i in 1:length(L)){
liks[ ,i] <- L[[i]] %>% dplyr::pull(negLogLik)
}
L
liks
grid$ave_lik <- rowMeans(liks)
grid
options(max.print = 6)
grid
options(max.print = 10)
grid
grid$ave_neg_lik <- rowMeans(liks)
getAverageLikGrid <-  function(folder){
all_paths <- dir(folder)
lik_grids <- all_paths[grepl("lik_grid",all_paths)]
L <- lapply(lik_grids, read.csv)
liks <- matrix(NA, nrow = nrow(L[[1]]), ncol = length(L))
for (i in 1:length(L)){
liks[ ,i] <- L[[i]] %>% dplyr::pull(negLogLik)
}
grid <- L[[1]] %>% select(gamma,lambda_0,theta)
grid$ave_neg_lik <- rowMeans(liks)
return(grid)
}
setwd("~/patience/results/C3/n=50K")
setwd("./realizations for s=1")
setwd(..)
setwd("..")
getwd()
getAverageLikGrid("./realizations for s=1")
getAverageLikGrid <-  function(folder){
all_paths <- dir(folder)
lik_grids <- all_paths[grepl("lik_grid",all_paths)]
L <- lapply(lik_grids, read.csv)
liks <- matrix(NA, nrow = nrow(L[[1]]), ncol = length(L))
for (i in 1:length(L)){
liks[ ,i] <- L[[i]] %>% dplyr::pull(negLogLik)
}
grid <- L[[1]] %>% select(gamma,lambda_0,theta)
grid$ave_neg_lik <- rowMeans(liks)
return(grid)
}
getAverageLikGrid <-  function(){
all_paths <- dir()
lik_grids <- all_paths[grepl("lik_grid",all_paths)]
L <- lapply(lik_grids, read.csv)
liks <- matrix(NA, nrow = nrow(L[[1]]), ncol = length(L))
for (i in 1:length(L)){
liks[ ,i] <- L[[i]] %>% dplyr::pull(negLogLik)
}
grid <- L[[1]] %>% select(gamma,lambda_0,theta)
grid$ave_neg_lik <- rowMeans(liks)
return(grid)
}
getAverageLikGrid()
setwd("~/patience/results/C3/n=50K/realizations for s=1")
setwd("~/patience/results/C3/n=50K/realizations for s=1")
getAverageLikGrid()
setwd("~/patience/results/C3/n=50K/realizations for s=2")
getAverageLikGrid()
PARAMS
estimateFolder(params = PARAMS)
setwd("~/patience/results/C3/n=50K/realizations for s=1")
dir()
setwd("~/patience/results/C3/n=50K/realizations for s=1")
dir()
getAverageLikGrid()
getwd()
substr(getwd(),nchar(getwd()) - 4, nchar(getwd()))
substr(getwd(),nchar(getwd()) - 3, nchar(getwd()))
substr(getwd(),nchar(getwd()) - 2, nchar(getwd()))
parse_number(getwd())
getwd()
getwd()
parse_number(strsplit(getwd()))
parse_number(str_split(getwd()))
parse_number(str_split(getwd(),pattern = ""))
str_split(getwd(),pattern = "")
parse_number(unlist(str_split(getwd(),pattern = "")))
parse_number(unlist(strsplit(getwd(),pattern = "")))
parse_number(unlist(strsplit(getwd(),split = "")))
unlist(strsplit(getwd(),split = "")
)
last(getwd())
last(unlist(strsplit(getwd(),split =) "")
last(unlist(strsplit(getwd(),split =) "")
setwd("~/patience/results/C3/n=50K/realizations for s=1")
name <- "ave_lik_s=1.csv"
aL <- getAverageLikGrid()
write.csv(al,file = name,row.names = F)
setwd("~/patience/results/C3/n=50K/realizations for s=1")
name <- "ave_lik_s=1.csv"
al <- getAverageLikGrid()
write.csv(al,file = name,row.names = F)
setwd("~/patience/results/C3/n=50K/realizations for s=2")
name <- "ave_lik_s=2.csv"
al <- getAverageLikGrid()
write.csv(al,file = name,row.names = F)
setwd("~/patience/results/C3/n=50K/realizations for s=3")
name <- "ave_lik_s=3.csv"
al <- getAverageLikGrid()
write.csv(al,file = name,row.names = F)
setwd("~/patience/results/C3/n=50K/realizations for s=5")
name <- "ave_lik_s=5.csv"
al <- getAverageLikGrid()
write.csv(al,file = name,row.names = F)
