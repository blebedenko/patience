import simpy
import simpy
import simpy
import simpy
import simpy
def car(env):
...     while True:
def car(env):
while True:
print('Start parking at %d' % env.now)
parking_duration = 5
yield env.timeout(parking_duration)
print('Start driving at %d' % env.now)
trip_duration = 2
yield env.timeout(trip_duration)
import simpy
def car(env):
while True:
print('Start parking at %d' % env.now)
parking_duration = 5
yield env.timeout(parking_duration)
print('Start driving at %d' % env.now)
trip_duration = 2
yield env.timeout(trip_duration)
env = simpy.Environment()
env.process(car(env))
env.run(until=15)
import simpy
def car(env):
while True:
print('Start parking at %d' % env.now)
parking_duration = 5
yield env.timeout(parking_duration)
print('Start driving at %d' % env.now)
trip_duration = 2
yield env.timeout(trip_duration)
env = simpy.Environment()
env.process(car(env))
env.run(until=15)
import simpy
def car(env):
while True:
print('Start parking at %d' % env.now)
parking_duration = 5
yield env.timeout(parking_duration)
print('Start driving at %d' % env.now)
trip_duration = 2
yield env.timeout(trip_duration)
env = simpy.Environment()
env.process(car(env))
env.run(until=15)
# testing file
library(tictoc)
library(tidyverse)
library(simsalapar)
library(parallel)
library(filenamer)
library(patience)
library(pbapply)
library(doParallel)
# Simulation --------------------------------------------------------------
eta <- 1
mu <- 1
s <- 6
# EB (Job size epxectation)eta/mu
n <- 2000
gamma <- 1
lambda_0 <- 10
theta <- 1
(rho <- (gamma + lambda_0/2) * eta / (s*mu))
PARAMS <- c(gamma = gamma,lambda_0=lambda_0,theta = theta)
tic()
RES <- resSimCosine(n=n,gamma = gamma,lambda_0 = lambda_0,theta = theta,s = s,eta = eta,mu = mu)
toc()
AWX <-RES2AWX(RES)
# Data Generation ---------------------------------------------------------
# Data Generation ---------------------------------------------------------
dir()
eta <- 1
mu <- 1
s <- 6
# EB (Job size epxectation)eta/mu
n <- 2000
gamma <- 1
lambda_0 <- 10
theta <- 1
(rho <- (gamma + lambda_0/2) * eta / (s*mu))
makeSimFilesAWX(path = "./example/",
n.cores = 4,
N_files = 10,
n_obs = 100,
s = s,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta,
eta = eta,
mu = mu
)
#' @param eta Shape parameter of job size.
#' @param mu Rate parameter of job size.
#' @param s Number of servers.
#' @details The filenames have the parameter values encoded alongside a timestamp,
#' which is meant for protection against overwriting in case of repeated calls to this function.
#' Also note that if files take less than a second to generate, they will not be written.
#' @return
#' @export
#'
#' @examples
makeSimFilesAWX <- function(path,
n.cores,
N_files,
n_obs,
gamma,
lambda_0,
theta,
s,
eta,
mu){
setwd(path)
cl <- makeCluster(n.cores) # make a parallel cluster
doParallel::registerDoParallel(cl=cl)
foreach::foreach(i= 1:N_files,
.combine = c,
.packages = "patience") %dopar% {
RES <- resSimCosine(n=n_obs,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta,
s = s,
eta = eta,
mu = mu)
A <- RES$A
W <- RES$Wj
X <- RES$Xj
dat <- data.frame(A=A,W=W,X=X)
name <- filenamer(n_obs = n_obs,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta,
s = s,
eta = eta,
mu = mu)
write.csv(dat,file = name,row.names = FALSE)
}
stopCluster(cl)
}
makeSimFilesAWX(path = "./example/",
n.cores = 4,
N_files = 10,
n_obs = 100,
s = s,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta,
eta = eta,
mu = mu
)
#' @param eta Shape parameter of job size.
#' @param mu Rate parameter of job size.
#' @param s Number of servers.
#' @details The filenames have the parameter values encoded alongside a timestamp,
#' which is meant for protection against overwriting in case of repeated calls to this function.
#' Also note that if files take less than a second to generate, they will not be written.
#' @return
#' @export
#'
#' @examples
makeSimFilesAWX <- function(dir_path,
n_cores,
N_files,
n_obs,
gamma,
lambda_0,
theta,
s,
eta,
mu){
dir.create(path = dir_path)
setwd(path)
cl <- makeCluster(n-cores) # make a parallel cluster
doParallel::registerDoParallel(cl=cl)
foreach::foreach(i= 1:N_files,
.combine = c,
.packages = "patience") %dopar% {
RES <- resSimCosine(n=n_obs,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta,
s = s,
eta = eta,
mu = mu)
A <- RES$A
W <- RES$Wj
X <- RES$Xj
dat <- data.frame(A=A,W=W,X=X)
name <- filenamer(n_obs = n_obs,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta,
s = s,
eta = eta,
mu = mu)
write.csv(dat,file = name,row.names = FALSE)
}
stopCluster(cl)
}
makeSimFilesAWX(path = "./example/",
n.cores = 4,
N_files = 10,
n_obs = 100,
s = s,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta,
eta = eta,
mu = mu
)
makeSimFilesAWX(dir_path =  "./example/",
n.cores = 4,
N_files = 10,
n_obs = 100,
s = s,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta,
eta = eta,
mu = mu
)
makeSimFilesAWX(dir_path =  "./example/",
n_cores = 4,
N_files = 10,
n_obs = 100,
s = s,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta,
eta = eta,
mu = mu
)
#' @param eta Shape parameter of job size.
#' @param mu Rate parameter of job size.
#' @param s Number of servers.
#' @details The filenames have the parameter values encoded alongside a timestamp,
#' which is meant for protection against overwriting in case of repeated calls to this function.
#' Also note that if files take less than a second to generate, they will not be written.
#' @return
#' @export
#'
#' @examples
makeSimFilesAWX <- function(dir_path,
n_cores,
N_files,
n_obs,
gamma,
lambda_0,
theta,
s,
eta,
mu){
dir.create(path = dir_path)
setwd(dir_path)
cl <- makeCluster(n-cores) # make a parallel cluster
doParallel::registerDoParallel(cl=cl)
foreach::foreach(i= 1:N_files,
.combine = c,
.packages = "patience") %dopar% {
RES <- resSimCosine(n=n_obs,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta,
s = s,
eta = eta,
mu = mu)
A <- RES$A
W <- RES$Wj
X <- RES$Xj
dat <- data.frame(A=A,W=W,X=X)
name <- filenamer(n_obs = n_obs,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta,
s = s,
eta = eta,
mu = mu)
write.csv(dat,file = name,row.names = FALSE)
}
stopCluster(cl)
}
makeSimFilesAWX(dir_path =  "./example/",
n_cores = 4,
N_files = 10,
n_obs = 100,
s = s,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta,
eta = eta,
mu = mu
)
#' @param eta Shape parameter of job size.
#' @param mu Rate parameter of job size.
#' @param s Number of servers.
#' @details The filenames have the parameter values encoded alongside a timestamp,
#' which is meant for protection against overwriting in case of repeated calls to this function.
#' Also note that if files take less than a second to generate, they will not be written.
#' @return
#' @export
#'
#' @examples
makeSimFilesAWX <- function(dir_path,
n_cores,
N_files,
n_obs,
gamma,
lambda_0,
theta,
s,
eta,
mu){
dir.create(path = dir_path)
setwd(dir_path)
cl <- makeCluster(n_cores) # make a parallel cluster
doParallel::registerDoParallel(cl=cl)
foreach::foreach(i= 1:N_files,
.combine = c,
.packages = "patience") %dopar% {
RES <- resSimCosine(n=n_obs,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta,
s = s,
eta = eta,
mu = mu)
A <- RES$A
W <- RES$Wj
X <- RES$Xj
dat <- data.frame(A=A,W=W,X=X)
name <- filenamer(n_obs = n_obs,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta,
s = s,
eta = eta,
mu = mu)
write.csv(dat,file = name,row.names = FALSE)
}
stopCluster(cl)
}
makeSimFilesAWX(dir_path =  "./example/",
n_cores = 4,
N_files = 10,
n_obs = 100,
s = s,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta,
eta = eta,
mu = mu
)
#' @param eta Shape parameter of job size.
#' @param mu Rate parameter of job size.
#' @param s Number of servers.
#' @details The filenames have the parameter values encoded alongside a timestamp,
#' which is meant for protection against overwriting in case of repeated calls to this function.
#' Also note that if files take less than a second to generate, they will not be written.
#' @return
#' @export
#'
#' @examples
makeSimFilesAWX <- function(dir_path,
n_cores,
N_files,
n_obs,
gamma,
lambda_0,
theta,
s,
eta,
mu){
dir.create(path = dir_path)
setwd(dir_path)
cl <- makeCluster(n_cores) # make a parallel cluster
doParallel::registerDoParallel(cl=cl)
foreach::foreach(i= 1:N_files,
.combine = c,
.packages = "patience") %dopar% {
RES <- resSimCosine(n=n_obs,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta,
s = s,
eta = eta,
mu = mu)
A <- RES$A
W <- RES$Wj
X <- RES$Xj
dat <- data.frame(A=A,W=W,X=X)
name <- filenamer(n_obs = n_obs,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta,
s = s,
eta = eta,
mu = mu)
write.csv(dat,file = name,row.names = FALSE)
}
stopCluster(cl)
setwd("..") # go to the previous folder
}
setwd("~/patience")
makeSimFilesAWX(dir_path =  "./s=1/",
n_cores = 4,
N_files = 10,
n_obs = 100,
s = 1,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta,
eta = eta,
mu = mu
)
makeSimFilesAWX(dir_path =  "./s=2/",
n_cores = 4,
N_files = 10,
n_obs = 100,
s = 2,
gamma = gamma,
lambda_0 = lambda_0,
theta = theta,
eta = eta,
mu = mu
)
dir()
